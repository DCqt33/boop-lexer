
MAX_OPERATOR_LENGTH = 3

KEYWORDS = {
    'abstract' : 'ABSTRACT',
    'alias' : 'ALIAS',
    'base': 'BASE',
    'bool': 'BOOL',
    'break': 'BREAK',
    'case': 'CASE',
    'catch': 'CATCH',
    'char': 'CHAR',
    'class': 'CLASS',
    'const': 'CONST',
    'constant': 'CONSTANT',
    'continue': 'CONTINUE',
    'default': 'DEFAULT',
    'dict': 'DICT',
    'dictionary': 'DICTIONARY',
    'do': 'DO',
    'double': 'DOUBLE',
    'else': 'ELSE',
    'enum': 'ENUM',
    'enumeration': 'ENUMERATION',
    'event': 'EVENT',
    'false': 'FALSE',
    'float': 'FLOAT',
    'for': 'FOR',
    'foreach': 'FOREACH',
    'format': 'FORMAT',
    'fortime': 'FORTIME',
    'from': 'FROM',
    'func': 'FUNC',
    'get': 'GET',
    'if': 'IF',
    'import': 'IMPORT',
    'inherit': 'INHERIT',
    'int': 'INT',
    'interface': 'INTERFACE',
    'list': 'LIST',
    'millisec': 'MILLISEC',
    'module': 'MODULE',
    'null': 'NULL',
    'override': 'OVERRIDE',
    'private': 'PRIVATE',
    'protected': 'PROTECTED',
    'public': 'PUBLIC',
    'recur': 'RECUR',
    'ref': 'REF',
    'return': 'RETURN',
    'second': 'SECOND',
    'set': 'SET',
    'static': 'STATIC',
    'string': 'STRING',
    'struct': 'STRUCT',
    'switch': 'SWITCH',
    'this': 'THIS',
    'throw': 'THROW',
    'time': 'TIME',
    'true': 'TRUE',
    'try': 'TRY',
    'virtual': 'VIRTUAL',
    'void': 'VOID',
    'while': 'WHILE',
    'where': 'WHERE'
}

RESERVED_WORDS = {
    
}

ALIASES = {
    'and' : '&&',
    'character' : 'CHAR',
    'dictionary' : 'DICT',
    'f' : 'FORMAT',
    'function': 'FUNCTION',
    'inherits' : 'INHERIT',
    'integer' : 'INT',
    'not' : '!',
    'or' : '||',
}

IDENTIFIER_STARTER_CHARMAP = '_'
IDENTIFIER_CHARMAP = '_abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789'

SPECIAL_CHARACTERS = {
    ' ': 'SPACE',
    '.': 'PERIOD',
    ',': 'COMMA',
    '`': 'BACKTICK',
    '~': 'TILDE',
    '@': 'AT_SIGN',
    '?': 'QUESTION_MARK',
    '!': 'EXCLAMATION_POINT',
    '$': 'DOLLAR',
    '#': 'HASH',
    '^': 'CARET',
    '*': 'ASTERISK',
    '%': 'PERCENT',
    '&': 'AMPERSAND',
    '(': 'PARENTHESIS_OPEN',
    ')': 'PARENTHESIS_CLOSE',
    '[': 'BRACKET_OPEN',
    ']': 'BRACKET_CLOSE',
    '{': 'BRACE_OPEN',
    '}': 'BRACE_CLOSE',
    '<': 'LEFT_ANGLED_BRACKET',
    '>': 'RIGHT_ANGLED_BRACKET',
    '+': 'PLUS',
    '=': 'EQUALS',
    '-': 'HYPHEN',
    '_': 'UNDERSCORE',
    '|': 'V_BAR',
    '/': 'FORWARD_SLASH',
    '\\': 'BACKWARD_SLASH',
    ':': 'COLON',
    ';': 'SEMICOLON',
    '\'': 'SINGLE_QUOTE',
    '\"': 'DOUBLE_QUOTE',
}

MATH_SYMBOLS = {
    '√': 'SQUARE',
    'x̅': 'MEAN',
    '∏': 'PRODUCT_NOTATION',
    'Σ': 'SUMMATION',
    'π': 'PI',
    'θ': 'THETA',
    'ι': 'IMAGINARY',
}

OPERATORS = {
    '.': 'DOT',
    '=': 'EQUALITY_OP',
    '+': 'PLUS_OP',
    '-': 'MINUS_OP',
    '*': 'MULT_OP',
    '/': 'DIV_OP',
    '%': 'MODULUS_OP',
    '^': 'EXPONENT',
    '**': 'EXPONENT',
    '+=': 'ADD_ASSIGN',
    '-=': 'MINUS_ASSIGN',
    '*=': 'MULT_ASSIGN',
    '/=': 'DIV_ASSIGN',
    '++': 'INCREMENT',
    '--': 'DECREMENT',
    '==': 'LOGICAL_EQUALS',
    '&&': 'LOGICAL_AND',
    '||': 'LOGICAL_OR',
    '!': 'LOGICAL_NOT',
    '!=': 'LOGICAL_NOT_EQUALS',
}

# Currently unused
BOOLEAN_OPERATORS = {
    '==': 'LOGICAL_EQUALS',
    '&&': 'LOGICAL_EQUALS',
    '||': 'LOGICAL_OR',
    '!': 'LOGICAL_NOT',
    '!=': 'LOGICAL_NOT_EQUALS',
}

DELIMITERS = {
    ',': 'COMMA',
    ':': 'COLON',
    ';': 'END_STATEMENT',
    '(': 'PARENTHESIS_START',
    ')': 'PARENTHESIS_END',
    '[': 'BRACKET_START',
    ']': 'BRACKET_END',
    '{': 'BRACE_START',
    '}': 'BRACE_END',
    '<': 'LEFT_ANGLE_BRACKET',
    '>': 'RIGHT_ANGLE_BRACKET',
    '\'': 'SINGLE_QUOTE',
    '\"': 'DOUBLE_QUOTE',
    '\'\'\'': 'SINGLE_QUOTE_TRIPLE',
    '\"\"\"': 'DOUBLE_QUOTE_TRIPLE',
    '//': 'COMMENT_DELIM',
    '/*': 'COMMENT_MULT_START',
    '*/': 'COMMENT_MULT_END',
    '->': 'RETURN_TYPE_DELIM',
    '=>': 'RETURN'
}

WHITESPACE = {
    '\r': 'CARRIAGE_RETURN',
    '\n': 'NEW_LINE',
    '\t': 'TAB',
    '\v': 'V_TAB',
}