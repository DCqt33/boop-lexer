using System;

-x : x;
module System
{
    public interface _Printable
    {
        public func ToString() -> string;
    }
}

module Timebase
{
    public interface ITimeunit
    {
        public func Until() -> Time;
    }

    public class Second: ITimeunit
}

module test
{
    public interface Killable
    {
        public func Death();
    }
}

module Lexer
{
    public struct Symbol (Printable)
    {
        public string Lexeme;
        public string Token;

        public Symbol(string lexeme, string token)
        {
            Lexeme = lexeme;
            token = token;
        }

        public func ToString() -> string
        {
            return format "[\'{lexeme}\', \'{token}\']";
        }
    }

    public class SymbolTable
    {
        public list Rows = { Symbol };
        
        public SymbolTable()
        {

        }
    }

    public class Analyzer
    {
        private char[] Content;
        private list Lines = { string };

        func ParseChar(char c)
        {
            if (c.IsAlpha())
            {
                
            }
        }

        public func Parse()
        {
            foreach (char c in Content)
            {
                ParseChar(c);
            }
        }
    }
}

module Math
{
    public class Constants
    {
        public const static Pi = 3.14159;
        public const static Gravity = 9.81;

        public int Number = 5;
        public string Message = "Hello World";
    }

    // Math functions
    public class Mathf
    {
        public static func Abs<T>(T x) -> T
        {
            return x < 0 ? -x : x;
        }

        public static func Pow<T>(T n, T p) -> T
        {
            return n ^ p;
        }
    }
}

public class Main
{
    static func Main()
    {

    }
}